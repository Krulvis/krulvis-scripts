package org.powbot.krulvis.tempoross;

import org.jetbrains.annotations.NotNull;
import org.powbot.krulvis.api.gui.ATGUI;
import org.powbot.krulvis.api.utils.resources.ATGson;

import javax.swing.*;
import java.awt.*;

public class TemporossGUI extends ATGUI<Tempoross, TemporossProfile> {
	private JPanel rootPanel;
	private JPanel temporossPanel;
	private JCheckBox cookFishCheckBox;
	private JCheckBox shootFishAfterTetheringCheckBox;
	private JSlider forceShootSlider;
	private JCheckBox firemanCheckBox;
	private JCheckBox forceCookingWith10CheckBox;
	private JSlider forceCookSlider;

	public TemporossGUI(@NotNull Tempoross script) {
		super(script);
		shootFishAfterTetheringCheckBox.addActionListener(e -> {
			forceShootSlider.setEnabled(shootFishAfterTetheringCheckBox.isSelected());
		});
		forceShootSlider.addChangeListener(e -> updateMinShootText());
		forceCookSlider.addChangeListener(e -> updateMinCookText());
		initialize(rootPanel);
	}

	@Override
	public void onStart(@NotNull Tempoross script, @NotNull TemporossProfile settings) {
		script.setStarted(true);
		script.setProfile(settings);
	}

	@NotNull
	@Override
	public TemporossProfile getCurrentSettings() {
		int minForCook = forceCookingWith10CheckBox.isSelected() ? forceCookSlider.getValue() : 28;
		return new TemporossProfile(cookFishCheckBox.isSelected(), shootFishAfterTetheringCheckBox.isSelected(), forceShootSlider.getValue(), minForCook);
	}

	@Override
	public void loadSettings(@NotNull TemporossProfile settings) {
		cookFishCheckBox.setSelected(settings.getCook());
		shootFishAfterTetheringCheckBox.setSelected(settings.getShootAfterTethering());
		forceShootSlider.setValue(settings.getMinFishToForceShoot());
		if (settings.getMinFishToCook() != 28) {
			forceCookSlider.setValue(settings.getMinFishToCook());
			forceCookingWith10CheckBox.setSelected(true);
		}
		updateMinShootText();
		updateMinCookText();
	}

	public void updateMinShootText() {
		shootFishAfterTetheringCheckBox.setText("Force shoot with " + forceShootSlider.getValue() + " fish after tethering");
	}

	public void updateMinCookText() {
		forceCookingWith10CheckBox.setText("Force cook with " + forceCookSlider.getValue() + " fish in inventory");
	}

	@NotNull
	@Override
	public TemporossProfile parseSettings(@NotNull String inputText) {
		return ATGson.INSTANCE.Gson().fromJson(inputText, TemporossProfile.class);
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		rootPanel = new JPanel();
		rootPanel.setLayout(new GridBagLayout());
		rootPanel.setInheritsPopupMenu(false);
		temporossPanel = new JPanel();
		temporossPanel.setLayout(new GridBagLayout());
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.BOTH;
		rootPanel.add(temporossPanel, gbc);
		cookFishCheckBox = new JCheckBox();
		cookFishCheckBox.setText("Cook Fish");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.anchor = GridBagConstraints.WEST;
		temporossPanel.add(cookFishCheckBox, gbc);
		shootFishAfterTetheringCheckBox = new JCheckBox();
		shootFishAfterTetheringCheckBox.setText("Force shoot with 10 fish after tethering");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.anchor = GridBagConstraints.WEST;
		temporossPanel.add(shootFishAfterTetheringCheckBox, gbc);
		forceShootSlider = new JSlider();
		forceShootSlider.setFocusable(false);
		forceShootSlider.setMaximum(28);
		forceShootSlider.setMinimum(1);
		forceShootSlider.setValue(10);
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 3;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		temporossPanel.add(forceShootSlider, gbc);
		firemanCheckBox = new JCheckBox();
		firemanCheckBox.setText("Fireman");
		firemanCheckBox.setToolTipText("Act as fireman and walk around dousing all fires");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.anchor = GridBagConstraints.WEST;
		temporossPanel.add(firemanCheckBox, gbc);
		forceCookingWith10CheckBox = new JCheckBox();
		forceCookingWith10CheckBox.setText("Force cooking with 10 fish in inventory");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 4;
		gbc.anchor = GridBagConstraints.WEST;
		temporossPanel.add(forceCookingWith10CheckBox, gbc);
		forceCookSlider = new JSlider();
		forceCookSlider.setMaximum(28);
		forceCookSlider.setMinimum(1);
		forceCookSlider.setValue(10);
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 5;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		temporossPanel.add(forceCookSlider, gbc);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return rootPanel;
	}

}
